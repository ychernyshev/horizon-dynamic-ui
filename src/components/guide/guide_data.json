{
  "en": {},
  "uk": {
    "Початок": {
      "<h2>Вступне слово!</h2>": [
        {
          "type": "text",
          "content": "Маю для тебе невеличке вступне слово перед тим, як дати відповідь на питання \"Чому DUI?\"."
        },
        {
          "type": "text",
          "content": "<p class='text-justify'>Ми всі шукаємо можливості знайти вихід з певних обставин та ситуацій. Саме тому й виникла ідея для створення DUI. Але, тут зіграла, радше, зацікавленість побудувати будинок, в якого фундаментом стане горнятко молока, котре й дозволить показати, як навіть із такого, на перший погляд, крихкого ресурсу, можна збудувати масштабну систему. На базі одного-єдиного обмеженого ресурсу — статичного хостингу — створити систему, яка зазвичай потребує повноцінного VPS. І при цьому не втратити контроль, гнучкість та автономність, які статичний хостинг сильно обмежує. \"Будинок\" на ньому тобі дозволить збудувати рішення, над яким я працюю. Я прагну надати тобі для цього якомога більше тих програмних агентів та механізмів, які зроблять статичний хостинг динамічним — без втрати контролю, без бекенду, і без компромісів. Для цього роду хостингу, може бути так, ти не матимеш бажання створювати таку можливість самостійно. А, отже, DUI може стати тобі в пригоді. Чим?.</p>"
        },
        {
          "type": "text",
          "content": "<h3>Огляд Horizon Dynamic UI</h3>"
        },
        {
          "type": "text",
          "content": "<p class='text-justify'>Все наше життя – гра, а люди в ній – актори. Цим Шекспірівським твердженням особливо нікого не здивуєш. Але, його можна використати для створення сайту...</p>"
        },
        {
          "type": "text",
          "content": "<h3>SceneManager</h3>"
        },
        {
          "type": "text",
          "content": "<b>Збірка</b>"
        },
        {
          "type": "text",
          "content": "<p class='text-justify'>Все відбувається на сцені. Сценою називається головний компонент сторінки. Та щоразу, вона може бути інакшою. Немає якоїсь конкретної сцени, до якої прикріплюється різне компонування сторінок сайту та їх дизайн. Так, на головній сторінці може бути одне компанування, у документації — інакше, а у дашборті — ще якесь інше. Таким чином був видалений \"зайвий\" шар з div у DOM-дереві сайту. Усе монтується одразу у body index.html: </p>"
        },
        {
          "type": "code",
          "language": "html",
          "content": "<body id=\"app\"></body>"
        },
        {
          "type": "text",
          "content": "<p class='text-justify'>До сцени приєднуються інші, другорядні компоненти. Кнопка може бути компонентом. Або компонентом може бути якась форма, яка, за допомогою [Dispatcher](reactive/dispatcher.md) має доступ до LocalStorage, щоб провести якусь операцію з [додавання](interacting_with_data/localStorage/creating.md) чи [оновлення](interacting_with_data/localStorage/updating.md) запису. На твій вибір, все можна розбити на окремі компоненти, слідуючи сучасним трендам організації коду, чи все писати та створювати безпосередньо на самій сцені не боячись повторюваності коду, адже JavaScript з [mount()](deep_immersion_in_components/mount().md) або [onMount()](deep_immersion_in_components/on_mount().md) дозволить цього уникнути. З DUI можна себе не обмежувати у виборі стилю написання коду. Обидва з підходів є рівнозначними.</p>"
        },
        {
          "type": "text",
          "content": "<h3>RegistryLayoutScheme</h3>"
        },
        {
          "type": "text",
          "content": "<b>Реєстрація</b>"
        },
        {
          "type": "text",
          "content": "<p class='text-justify'>Сцена щоразу будується [SceneManager](deep_immersion_in_components/scene_manager.md) за заздалегідь визначеною схемою та налаштуваннями. Ці схеми та налаштування зберігаються у [RegistryLayoutScheme](essentials/scene_settings.md). Там зберігаються дані про те:</p><ul><li>базовий контейнер для монтування сцени,</li><li>список компонентів, які мають бути присутніми на сцені,</li><li>які дані мають бути передані у батьківський чи дочірні компоненти, наприклад:<ul><li>змінні,</li><li>заголовки,</li><li>списки,</li><li>блоки коду для відображення тощо</li></ul></li><li>які скрипти та стилі для кожної сцени, додатково, необхідно приєднати.</li></ul>"
        },
        {
          "type": "text",
          "content": "<h3>LayoutRegistryComponents</h3>"
        },
        {
          "type": "text",
          "content": "<b>Імпорт</b>"
        },
        {
          "type": "text",
          "content": "<p class='text-justify'>А для того, щоб сцену не перевантажувати імпортами компонентів, існує окремий файл - [LayoutRegistryComponents](essentials/scene_register.md), де й представлений список усіх імпортів сцен та компонентів по всьому застосунку. Цими даними оперує [SceneManager](deep_immersion_in_components/scene_manager.md), коли сцену складає по \"кресленнях\" з [RegistryLayoutScheme](essentials/scene_settings.md). Усе зв'язано через SceneManager, тож додатково викликати нічого не потрібно. Просто, створити сцену, налаштувати її структуру та необхідні для передавання дані у LayoutRegistryComponents, зареєструвати у RegistryLayoutScheme, і SceneManager зробить усе інше.</p>"
        },
        {
          "type": "text",
          "content": "<h3>Заперечлива архітектура?</h3>"
        },
        {
          "type": "text",
          "content": "<p class='text-justify'>Архітектура Horizon Dynamic UI — це не протест проти традиційної залежності від бекенду, сервісів, і надмірної серверної логіки. Це необхідність у рамках статичного хостингу, що й зумовлює відмову від цих понять на час роботи із Horizon Dynamic UI,  де кожен компонент не потребує нічого, окрім браузеру та коду, яким він керує. Цей інтерфейс, як автономна система — UI, який *не просто живе у браузері*, а реагує і масштабується локально. Архітектура DUI реалізує можливість кожному агенту, компоненту і рендеру виконувати свою роль самостійно. Усе побудовано таким чином, щоб навіть без серверу можливим було рендерити динамічні дані, реагувати на взаємодію із користувачем, зберігати та аналізувати стан, та створювати логіку, як у фреймворках із повним стеком. Ми не можемо використовувати бекенд на статичних хостингах, тому ми *будуємо його у фронтенді*.</p>"
        },
        {
          "type": "text",
          "content": "<h3>Обирай продовжити! </h3>"
        },
        {
          "type": "text",
          "content": "<b>[Швидкий старт](quick-start.md)</b>"
        },
        {
          "type": "text",
          "content": "<p class='text-justify'>Покликання цієї коротенької екскурсії до DUI, надихнути тебе познайомитися із фреймворком по ближче. Адже він створений для втілення твоїх ідей у \"замкненому просторі\". Без втрати контролю, без бекенду, і без компромісів!</p>"
        }
      ],
      "Швидкий старт": [
        {
          "type": "text",
          "content": "Підключи core.js, створи Welcome.scene.js, і запусти через LayoutRegistryScheme."
        },
        {
          "type": "code",
          "language": "js",
          "content": "import { Horizon } from './core.js';\nHorizon.load('Welcome.scene.js');"
        }
      ]
    },
    "Основи роботи": {
      "Налаштування сцени/компоненту у RegistryLayoutScheme": [
        {
          "type": "text",
          "content": "Макет, що тримає реєстр компонентів"
        },
        {
          "type": "code",
          "language": "js",
          "content": "RegistryLayoutScheme.register({ scene: WelcomeScene });"
        }
      ],
      "Реєстрація сцени/компоненту у LayoutRegistryComponents": [
        {
          "type": "text",
          "content": "Реєстр схем макетів"
        },
        {
          "type": "code",
          "language": "js",
          "content": "LayoutRegistryComponents.add('welcome', WelcomeScene);"
        }
      ],
      "Прив'язування стилів та скриптів": [
        {
          "type": "text",
          "content": "Прив'язування стилів та скриптів"
        }
      ],
      "Створення посилань та кнопок": [
        {
          "type": "text",
          "content": "Створення посилань та кнопок"
        }
      ],
      "Виклик messages": [
        {
          "type": "text",
          "content": "Виклик messages"
        }
      ],
      "Блок коду": [
        {
          "type": "text",
          "content": "Блок коду"
        }
      ]
    },
    "Глибше занурення у компоненти": {
      "config": [
        {
          "type": "code",
          "language": "js",
          "content": "const {title} = config;"
        },
        {
          "type": "code",
          "language": "js",
          "content": "const {codeSnippets = {}} = params;"
        },
        {
          "type": "code",
          "language": "js",
          "content": "this.onMount(config);"
        }
      ]
    },
    "Роутинг": {
      "Хеш-посилання": [
        {
          "type": "text",
          "content": "Хеш-посилання"
        }
      ],
      "Створення {CTA_button}": [
        {
          "type": "text",
          "content": "Створення {CTA_button}"
        }
      ],
      "Використання useCTA() хелпера": [
        {
          "type": "text",
          "content": "Використання useCTA() хелпера"
        }
      ]
    },
    "Реактивна підсистема": {
      "Робота з Dispatcher": [
        {
          "type": "text",
          "content": "Робота з Dispatcher"
        }
      ],
      "SceneMount": [
        {
          "type": "text",
          "content": "SceneMount"
        }
      ],
      "MessagesAgent": [
        {
          "type": "text",
          "content": "MessagesAgent"
        }
      ]
    },
    "Збереження даних у localStorage": {
      "Додавання":  [
        {
          "type": "text",
          "content": "Додавання"
        }
      ],
      "Зчитування": [
        {
          "type": "text",
          "content": "Завантаження"
        }
      ],
      "Видалення": [
        {
          "type": "text",
          "content": "Видалення"
        }
      ]
    },
    "Хелпери": {
      "renderTemplate": [
        {
          "type": "text",
          "content": "renderTemplate"
        }
      ],
      "useAssets": [
        {
          "type": "text",
          "content": "renderTemplate"
        }
      ],
      "useCTA": [
        {
          "type": "text",
          "content": "useCTA"
        }
      ],
      "useDispatcher": [
        {
          "type": "text",
          "content": "useDispatcher"
        }
      ],
      "useHighlight": [
        {
          "type": "text",
          "content": "useHighlight"
        }
      ],
      "useLocalStorage": [
        {
          "type": "text",
          "content": "useLocalStorage"
        }
      ],
      "useMessages": [
        {
          "type": "text",
          "content": "useMessages"
        }
      ],
      "useRouting": [
        {
          "type": "text",
          "content": "useRouting"
        }
      ]
    }
  }
}
